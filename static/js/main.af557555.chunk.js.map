{"version":3,"sources":["utils/dateUtils.js","components/line/MainLineChart.js","components/nycMap/NYCMap.js","App.js","hooks/useTimer/useTimer.js","hooks/useFilters/useFilters.js","reportWebVitals.js","index.js"],"names":["convertDateToYearMonthDayString","date","getFullYear","getMonth","getDate","MainLineChart","data","play","setPlay","filters","useState","name","color","lines","setlines","domainFixed","moment","valueOf","domainFluid","domain","setDomain","useEffect","filtered_lines","prop","push","key","boro_names_acronyms","selected_colors","length","filterLines","filtersChanged","points","setPoints","setTimeout","p","next","tooltipFormater","time","format","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","Customized","component","row","getCurrentDateOfTimeLapse","currentDate","cases","version","baseProfile","xmlns","x","y","fontSize","textAnchor","fill","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","type","tickFormatter","m","month","minTickGap","YAxis","yAxisId","orientation","Tooltip","labelFormatter","Legend","map","line","Line","strokeWidth","stroke","dot","Brush","args","NYCMap","setFilters","unselected_colors","Object","keys","reduce","acc","colors","setColors","crime_data","features","nyc_borough_geo","fillColor","properties","BoroName","unknownColor","label","valueFormat","projectionType","projectionScale","projectionTranslation","projectionRotation","enableGraticule","graticuleLineColor","borderWidth","borderColor","tooltip","e","style","feature","onClick","cur","selected","unselected","App","jan2021date","Date","covid_cases","covid_cases_2019_2020","ALL_CASE_COUNT_7DAY_AVG","sort","a","b","filter","arrests_cases","arrest_2019_2020","ARREST_DATE","COUNT_SMA_7","startTime","endTime","step","frequency","setTime","isPlaying","setIsPlaying","interval","setInterval","clearInterval","stop","useTimer","setFiltersChanged","updateFilters","prevState","props","useFilters","arrests_covid_data","arrest_covid_merged","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","typography","fontFamily","join","barChartsRef","useRef","ThemeProvider","Grid","container","justify","alignItems","align","xs","md","item","spacing","direction","Typography","variant","Paper","className","IconButton","current","scrollIntoView","behavior","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af557555.chunk.js","sourcesContent":["export function convertDateToYearMonthDayString(date)\r\n{\r\n    return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n}","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { filter } from \"d3-array\";\r\nimport moment from \"moment\";\r\nimport {\r\n\tLineChart,\r\n\tLine,\r\n\tXAxis,\r\n\tYAxis,\r\n\tCartesianGrid,\r\n\tTooltip,\r\n\tLegend,\r\n\tResponsiveContainer,\r\n\tBrush,\r\n\tCustomized\r\n} from \"recharts\";\r\nimport { convertDateToYearMonthDayString } from \"../../utils/dateUtils\";\r\nimport boro_names_acronyms from \"../../data/boro_name_acronym.json\";\r\nimport selected_colors from \"../../data/boroColors_selected.json\";\r\nexport default function MainLineChart({ data, play, setPlay, filters }) {\r\n\tconst [lines, setlines] = useState([{ name: \"ARREST_COUNT_7DAY_AVG\", color: \"#fcba03\" }])\r\n\tconst domainFixed = [\r\n\t\tmoment('2019-01-01').valueOf(),\r\n\t\tmoment('2020-12-31').valueOf()\r\n\t];\r\n\tconst domainFluid = [\"auto\", \"auto\"];\r\n\tconst [domain, setDomain] = useState(domainFluid)\r\n\r\n\tconst filterLines = (filters) => {\r\n\t\tconst filtered_lines = [];\r\n\r\n\t\tfor (const prop in filters) {\r\n\t\t\tif (filters[prop]) {\r\n\t\t\t\tfiltered_lines.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkey: \"ARREST_COUNT_7DAY_AVG_\" + boro_names_acronyms[prop],\r\n\t\t\t\t\t\tname: prop,\r\n\t\t\t\t\t\tcolor: selected_colors[prop]\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (filtered_lines.length === 0) {\r\n\t\t\tfiltered_lines.push({ key: \"ARREST_COUNT_7DAY_AVG\", name: \"NYC\", color: \"#fcba03\" });\r\n\t\t}\r\n\t\tsetlines(filtered_lines);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfilterLines(filters.filters)\r\n\r\n\t}, [filters.filtersChanged])\r\n\r\n\tconst [points, setPoints] = useState(data)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (play) {\r\n\t\t\tif (points.length === data.length) {\r\n\t\t\t\tsetPlay(!play);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetPoints(p => {\r\n\t\t\t\t\tif (p.length === data.length) {\r\n\t\t\t\t\t\tsetPlay(!play);\r\n\t\t\t\t\t\treturn p;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst next = data[p.length]\r\n\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t...p,\r\n\t\t\t\t\t\tnext,\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t}, 50)\r\n\t\t}\r\n\t}, [points, setPoints])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (play) {\r\n\t\t\tsetDomain(domainFixed);\r\n\t\t\tsetPoints([]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetDomain(domainFluid);\r\n\t\t\tsetPoints(data);\r\n\t\t}\r\n\t}, [play])\r\n\r\n\t// const newData = [data[0],\r\n\t// {\r\n\t//     id: \"Covid Cases 7 Day Average Historical\",\r\n\t//     color: \"hsl(19, 70%, 50%)\",\r\n\t//     data: points\r\n\t// }, data[1]]\r\n\r\n\t// const commonProperties = {\r\n\t//     height: 400,\r\n\t//     margin: { top: 20, right: 50, bottom: 60, left: 60 },\r\n\t//     data : newData,\r\n\t//     animate: true,\r\n\t//     enableSlices: 'x',\r\n\t// }\r\n\r\n\t// const commonProperties1 = {\r\n\t//     width: 800,\r\n\t//     height: 400,\r\n\t//     margin: { top: 20, right: 50, bottom: 60, left: 60 },\r\n\t//     data: newData,\r\n\t//     animate: true,\r\n\t//     enableSlices: 'x',\r\n\t// }\r\n\r\n\t// const CustomSymbol = ({ size, color, borderWidth, borderColor }) => (\r\n\t//     <g>\r\n\t//         <circle fill=\"#fff\" r={size / 8} strokeWidth={borderWidth} stroke={borderColor} />\r\n\t//         <circle\r\n\t//             r={size / 5}\r\n\t//             strokeWidth={borderWidth}\r\n\t//             stroke={borderColor}\r\n\t//             fill={color}\r\n\t//             fillOpacity={0.35}\r\n\t//         />\r\n\t//     </g>\r\n\t// )\r\n\tconst currentDateLayer = ({ data, width, height }) => {\r\n\t\tconst getCurrentDateOfTimeLapse = (data) => {\r\n\t\t\tconst row = data[data.length - 1];\r\n\t\t\tif (row) {\r\n\t\t\t\treturn [tooltipFormater(row.date), row[\"COVID_COUNT_7DAY_AVG\"]];\r\n\t\t\t}\r\n\t\t\treturn ['', ''];\r\n\t\t}\r\n\t\tconst [currentDate, cases] = getCurrentDateOfTimeLapse(data)\r\n\t\tconst getAvgCasesString = () => {\r\n\t\t\tif (cases != '' || cases == 0) {\r\n\t\t\t\treturn \"7-Day Avg: \" + cases;\r\n\t\t\t}\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<svg version=\"1.1\"\r\n\t\t\t\tbaseProfile=\"full\"\r\n\t\t\t\twidth={width} height={height}\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t<text x={width / 2 - 50} y={height / 2 - 50} fontSize=\"50\" textAnchor=\"middle\" fill=\"lightgray\">{currentDate}</text>\r\n\t\t\t\t<text x={width / 2 - 50} y={height / 2} fontSize=\"50\" textAnchor=\"middle\" fill=\"lightgray\">{getAvgCasesString()}</text>\r\n\t\t\t</svg>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\r\n\tconst generateTicks = (start, end) => { };\r\n\r\n\tconst tooltipFormater = (time) => {\r\n\t\treturn moment(time).format(\"Do [of] MMMM, YYYY\");\r\n\t};\r\n\r\n\tconst formatDateTick = (time) => {\r\n\t\tconst m = moment(time);\r\n\t\tif (m.month() == 0) {\r\n\t\t\treturn m.format(\"MMM, YYYY\");\r\n\t\t}\r\n\t\treturn m.format(\"MMM\");\r\n\t};\r\n\r\n\tconst brushFormatDateTick = (args) => {\r\n\t\tconst time = data[args].date;\r\n\t\treturn moment(time).format(\"Do MMM, YY\");\r\n\t};\r\n\r\n\tconst customElement = (args) => {\r\n\t\tconsole.log(args);\r\n\t\treturn <div></div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ResponsiveContainer width=\"100%\" height=\"100%\">\r\n\t\t\t<LineChart\r\n\t\t\t\twidth={500}\r\n\t\t\t\theight={300}\r\n\t\t\t\tdata={points}\r\n\t\t\t\tmargin={{\r\n\t\t\t\t\ttop: 5,\r\n\t\t\t\t\tright: 30,\r\n\t\t\t\t\tleft: 20,\r\n\t\t\t\t\tbottom: 5,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Customized key=\"date_background\" component={currentDateLayer} />\r\n\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t<XAxis\r\n\t\t\t\t\tdataKey=\"date\"\r\n\t\t\t\t\tscale=\"time\"\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\ttickFormatter={formatDateTick}\r\n\t\t\t\t\tdomain={domain}\r\n\t\t\t\t\tminTickGap={30}\r\n\t\t\t\t/>\r\n\t\t\t\t<YAxis yAxisId=\"left\" />\r\n\t\t\t\t<YAxis yAxisId=\"right\" orientation=\"right\" />\r\n\t\t\t\t<Tooltip labelFormatter={tooltipFormater} />\r\n\t\t\t\t<Legend />\r\n\t\t\t\t{\r\n\t\t\t\t\tlines.map((line) => {\r\n\t\t\t\t\t\treturn <Line\r\n\t\t\t\t\t\t\tkey={line.key}\r\n\t\t\t\t\t\t\tstrokeWidth=\"3px\"\r\n\t\t\t\t\t\t\tyAxisId=\"left\"\r\n\t\t\t\t\t\t\ttype=\"monotone\"\r\n\t\t\t\t\t\t\tname={line.name}\r\n\t\t\t\t\t\t\tdataKey={line.key}\r\n\t\t\t\t\t\t\tstroke={line.color}\r\n\t\t\t\t\t\t\tdot={false}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t<Line\r\n\t\t\t\t\tkey=\"covid\"\r\n\t\t\t\t\tstrokeWidth=\"3px\"\r\n\t\t\t\t\tyAxisId=\"right\"\r\n\t\t\t\t\ttype=\"monotone\"\r\n\t\t\t\t\tname=\"Covid Cases 7Day AVG\"\r\n\t\t\t\t\tdataKey=\"COVID_COUNT_7DAY_AVG\"\r\n\t\t\t\t\tstroke=\"#fc0703\"\r\n\t\t\t\t\tdot={false}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Brush tickFormatter={brushFormatDateTick} />\r\n\t\t\t</LineChart>\r\n\t\t</ResponsiveContainer>\r\n\t);\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ResponsiveChoropleth, ResponsiveGeoMap } from '@nivo/geo';\r\nimport { nyc_borough_geo } from \"../../data/nycGeo\";\r\nimport crime_data from \"../../data/crimeData/crime_counts.json\";\r\nimport selected_colors from \"../../data/boroColors_selected.json\";\r\nexport default function NYCMap({ data, setFilters }) {\r\n    const unselected_color = \"#eeeeee\";\r\n    const unselected_colors = Object.keys(selected_colors).reduce((acc, key) => { acc[key] =unselected_color; return acc; }, {})\r\n    const [colors, setColors] = useState({...unselected_colors})\r\n\r\n    const tooltipFormater = (e) => {\r\n        return <div style={{ \"backgroundColor\": \"white\", \"padding\": \"5px\" }}><b>{e.feature.properties.BoroName}</b></div>;\r\n    }\r\n\r\n    const colorFormater = (args) => {\r\n        return colors[args.properties.BoroName]\r\n    }\r\n\r\n    const mouseClick = (e) => {\r\n        const name = e.properties.BoroName;\r\n        const cur = colors[name];\r\n        const selected = selected_colors[name];\r\n        const unselected = unselected_colors[name];\r\n        let next = cur == selected ? unselected : selected;\r\n        setColors({...colors, [name]: next});\r\n        setFilters(name);\r\n    }\r\n\r\n    return (\r\n    <ResponsiveGeoMap\r\n        data={crime_data}\r\n        features={nyc_borough_geo.features}\r\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n        height={250}\r\n        fillColor={colorFormater}\r\n        unknownColor=\"#666666\"\r\n        label=\"properties.BoroName\"\r\n        valueFormat=\".2s\"\r\n        projectionType=\"orthographic\"\r\n        projectionScale={25000}\r\n        projectionTranslation={[0.39, 0.5]}\r\n        projectionRotation={[74.05, -40.7, -360]}\r\n        enableGraticule={true}\r\n        graticuleLineColor=\"#dddddd\"\r\n        borderWidth={1}\r\n        borderColor=\"#152538\"\r\n        tooltip={tooltipFormater}\r\n        onClick={mouseClick}\r\n    />\r\n)}","import React, { useState, useRef } from \"react\";\n\nimport covid_cases_7day_avg from \"./data/covid/covid_cases_7day_avg.json\";\nimport covid_cases_2019_2020 from \"./data/covid/covid_cases_2019_2020.json\";\nimport arrest_2019_2020 from \"./data/crimeData/arrest_data_2019_2020.json\";\nimport arrest_covid_merged from \"./data/arrest_covid_merged.json\";\n\nimport MainLineChart from \"./components/line/MainLineChart\";\nimport NYCMap from \"./components/nycMap/NYCMap\";\n\nimport useTimer from \"./hooks/useTimer/useTimer\";\nimport useFilters from \"./hooks/useFilters/useFilters\";\nimport { convertDateToYearMonthDayString } from \"./utils/dateUtils\";\n\nimport { Button, Grid, Paper, TextField, Typography, IconButton } from \"@material-ui/core\";\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport { orange } from '@material-ui/core/colors';\n\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport StopIcon from '@material-ui/icons/Stop';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\n\nimport \"./App.css\";\n\nfunction App() {\n\n  const [play, setPlay] = useState(false);\n\n  const jan2021date = new Date(\"01-01-2021\");\n  const covid_cases = covid_cases_2019_2020\n    .map(row => ({ x: new Date(row.date), y: row.ALL_CASE_COUNT_7DAY_AVG }))\n    .sort((a, b) => a.x < b.x).filter(row => row.x < jan2021date)\n\n  const arrests_cases = arrest_2019_2020\n    .map(row => ({ x: new Date(row.ARREST_DATE), y: row.COUNT_SMA_7 }))\n    .sort((a, b) => a.x < b.x)\n\n  const timer = useTimer({\n    startTime: new Date(covid_cases[0].x),\n    endTime: new Date(covid_cases[covid_cases.length - 1].x),\n    step: 1000 * 60 * 60,\n    frequency: 24 * 7,\n  });\n\n  const filters = useFilters();\n\n  const covid_data = {\n    id: \"Covid Cases 7 Day Average\",\n    color: \"hsl(315, 70%, 50%)\",\n    data: covid_cases.map(row => ({ ...row, x: convertDateToYearMonthDayString(row.x) }))\n  }\n\n  const arrests_data = {\n    id: \"Arrests Cases 7 Day Average\",\n    color: \"hsl(215, 70%, 50%)\",\n    data: arrests_cases.map(row => ({ ...row, x: convertDateToYearMonthDayString(row.x) }))\n  }\n\n  const arrests_covid_data = arrest_covid_merged\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: '#ff4400',\n      },\n      secondary: {\n        light: '#0066ff',\n        main: '#0044ff',\n        contrastText: '#ffcc00',\n      },\n      contrastThreshold: 3,\n      tonalOffset: 0.2,\n    },\n    typography: {\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n    },\n  });\n  const barChartsRef = useRef()\n\n  const scrollDown = () => {\n    barChartsRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid container justify=\"center\" alignItems=\"flex-start\" align=\"center\" xs={12} md={12}>\n\n        <Grid item container justify=\"space-between\" alignItems=\"stretch\" xs={12} md={2} spacing={2} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h4\">NYC Crimes and Covid</Typography>\n          </Grid>\n          <Grid item xs={12} md={12} >\n            <Paper className=\"filter_options\">\n              <NYCMap data={[]} setFilters={filters.updateFilters} />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={12}>\n            <Paper >\n              <IconButton color=\"primary\" component=\"span\" onClick={() => setPlay(!play)}>\n                {!play ? <PlayCircleOutlineIcon fontSize=\"large\" /> : <StopIcon fontSize=\"large\" />}\n              </IconButton>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Grid item container xs={12} md={10} justify=\"center\">\n          <Grid item xs={12} md={12} className=\"main_line_chart\" >\n            <MainLineChart data={arrests_covid_data} play={play} setPlay={setPlay} filters={filters}></MainLineChart>\n          </Grid>\n        </Grid>\n        <Grid item>\n            <IconButton color=\"primary\" component=\"span\" onClick={scrollDown}>\n              <KeyboardArrowDownIcon fontSize=\"large\" />\n            </IconButton>\n        </Grid>\n        <Grid container ref={barChartsRef} justify=\"center\" alignItems=\"center\" align=\"center\" direction=\"column\" xs={12}>\n          <Grid item >\n            <Typography variant=\"h4\">Most Effected Categories</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  )\n}\n\nexport default App","import { useEffect, useState } from \"react\"\r\n\r\nexport default function useTimer({ startTime, endTime, step, frequency }) {\r\n    /** State hook of current time as a value in milliseconds */\r\n    const [time, setTime] = useState(startTime.valueOf())\r\n\r\n    /** State hook representing whether timer is playing or not */\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n\r\n    /** Effect hook that runs when state of isPlaying changes */\r\n    useEffect(() => {\r\n        let interval\r\n\r\n        /** if the current state is playing.. */\r\n        if (isPlaying) {\r\n            /** set interval to run frequncy times every second */\r\n            interval = setInterval(() => {\r\n                /** increment the time by the step value */\r\n                setTime(time => time + step)\r\n            }, 1000 / frequency)\r\n        }\r\n\r\n        /** Cleanup effect by clearing interval */\r\n        return () => clearInterval(interval)\r\n    }, [isPlaying])\r\n\r\n    const playOrStop = () => {\r\n        if(!isPlaying)\r\n        {\r\n            play();\r\n        }\r\n        else\r\n        {\r\n            stop();\r\n        }\r\n    }\r\n\r\n    /** Play function */\r\n    const play = () => {setIsPlaying(true)}\r\n\r\n    /** Stop function */\r\n    const stop = () => setIsPlaying(false)\r\n\r\n    /** Effect hook runs when time changes */\r\n    useEffect(() => {\r\n        /** if time is greater or equal to endTime, stop the timer from running */\r\n        if (time >= endTime.valueOf()) stop()\r\n    }, [time, endTime.valueOf()])\r\n\r\n    const updateTime = time => setTime(time.valueOf())\r\n\r\n    return { time: new Date(time), play, stop, playOrStop, updateTime, isPlaying, startTime, endTime }\r\n}\r\n","import { useEffect, useState } from \"react\"\r\n\r\nexport default function useFilters() {\r\n    const [filters, setFilters] = useState({});\r\n    const [filtersChanged, setFiltersChanged] = useState(false);\r\n\r\n    const updateFilters = filter => {\r\n        setFilters((prevState, props) => {\r\n            return { ...prevState, [filter]: !prevState[filter] };\r\n        })\r\n        setFiltersChanged(!filtersChanged)\r\n    }\r\n\r\n    return { filters, updateFilters, filtersChanged}\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}