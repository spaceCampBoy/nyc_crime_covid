{"version":3,"sources":["data/nycGeo/boroughs.geojson","utils/dateUtils.js","components/line/covidLine.js","App.js","hooks/useTimer/useTimer.js","reportWebVitals.js","index.js"],"names":["convertDateToYearMonthDayString","date","getFullYear","getMonth","getDate","CovidLine","data","play","useState","slice","points","setPoints","useEffect","length","setTimeout","p","next","commonProperties","width","height","margin","top","right","bottom","left","id","color","animate","enableSlices","xScale","type","format","precision","xFormat","yScale","stacked","axisLeft","legend","legendOffset","legendPosition","axisBottom","tickValues","enablePoints","curve","enablePointLabel","pointSymbol","size","borderWidth","borderColor","fill","r","strokeWidth","stroke","fillOpacity","pointSize","pointBorderWidth","pointBorderColor","from","modifiers","layers","series","innerHeight","timelapseSeries","currentRow","x","y","getCurrentDateOfTimeLapse","currentDate","cases","version","baseProfile","xmlns","font-size","text-anchor","useMesh","enableArea","App","setPlay","covid_cases","covid_cases_7day_avg","map","row","Date","ALL_CASE_COUNT_7DAY_AVG","sort","a","b","startTime","endTime","step","frequency","valueOf","time","setTime","isPlaying","setIsPlaying","interval","setInterval","clearInterval","stop","useTimer","console","log","nyc_borough_geo","covid_data","Grid","container","justify","alignItems","align","item","xs","className","direction","IconButton","aria-label","component","onClick","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ytqBAAe,MAA0B,yC,iBCAlC,SAASA,EAAgCC,GAE5C,OAAOA,EAAKC,cAAgB,KAAOD,EAAKE,WAAa,GAAK,IAAMF,EAAKG,U,YCQ1D,SAASC,EAAT,GAAuD,IAAjCC,EAAgC,EAAhCA,KAAyBC,EAAO,EAAPA,KAC1D,EAA4BC,mBAASF,EAAK,GAAGA,KAAKG,MAAM,EAAE,IAA1D,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACN,GAAGL,EACH,CACI,GAAIG,EAAOG,SAAWP,EAAK,GAAGA,KAAKO,OAAS,OAE5CC,YAAW,WACPH,GAAU,SAAAI,GACN,GAAIA,EAAEF,SAAWP,EAAK,GAAGA,KAAKO,OAAQ,OAAOE,EAC7C,IAAMC,EAAOV,EAAK,GAAGA,KAAKS,EAAEF,QAE5B,MAAM,GAAN,mBACOE,GADP,CAEIC,SAGT,QAER,CAACN,EAAQC,EAAWJ,IAEvB,IAOMU,EAAmB,CACrBC,MAAO,IACPC,OAAQ,IACRC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDlB,KAXY,CAACA,EAAK,GACtB,CACImB,GAAI,uCACJC,MAAO,oBACPpB,KAAMI,IAQNiB,SAAS,EACTC,aAAc,KAgDlB,OACI,cAAC,IAAD,2BACQX,GADR,IAEIY,OAAQ,CACJC,KAAM,OACNC,OAAQ,WACRC,UAAW,OAEfC,QAAQ,gBACRC,OAAQ,CACJJ,KAAM,SACNK,SAAS,GAEbC,SAAU,CACNC,OAAQ,gBACRC,cAAe,GACfC,eAAgB,UAEpBC,WAAY,CACRT,OAAQ,QACRU,WAAY,gBACZJ,OAAQ,OACRC,aAAc,GACdC,eAAgB,UAEpBG,cAAc,EACdC,MAAM,WACNC,kBAAkB,EAClBC,YAzEa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMpB,EAAT,EAASA,MAAOqB,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,YAA7B,OACjB,8BACI,wBAAQC,KAAK,OAAOC,EAAGJ,EAAO,EAAGK,YAAaJ,EAAaK,OAAQJ,IACnE,wBACIE,EAAGJ,EAAO,EACVK,YAAaJ,EACbK,OAAQJ,EACRC,KAAMvB,EACN2B,YAAa,UAkEjBC,UAAW,EACXC,iBAAkB,EAClBC,iBAAkB,CACdC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAE3BC,OAAQ,CApES,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,OAaxB,GAbkE,EAAlC/B,OAAkC,EAA1BK,OAA0B,EAAlB2B,YACd,SAACD,GAC/B,IAAME,EAAkBF,EAAO,GAAGtD,KAClC,GAAGwD,EACH,CACI,IAAMC,EAAaD,EAAgBA,EAAgBjD,OAAS,GAC5D,GAAIkD,GAAcA,EAAWzD,MAAQyD,EAAWzD,KAAK0D,EAEjD,MAAO,CAAChE,EAAgC+D,EAAWzD,KAAK0D,GAAID,EAAWzD,KAAK2D,GAGpF,MAAO,CAAC,GAAG,IAEcC,CAA0BN,IAAvD,mBAAOO,EAAP,KAAoBC,EAApB,KASA,OACI,sBAAKC,QAAQ,MACTC,YAAY,OACZpD,MAAOD,EAAiBC,MAAOC,OAAQF,EAAiBE,OACxDoD,MAAM,6BAHV,UAII,sBAAMP,EAAG/C,EAAiBC,MAAQ,EAAI,GAAI+C,EAAGhD,EAAiBE,OAAS,EAAI,GAAIqD,YAAU,KAAKC,cAAY,SAASxB,KAAK,YAAxH,SAAqIkB,IACrI,sBAAMH,EAAG/C,EAAiBC,MAAQ,EAAI,GAAI+C,EAAGhD,EAAiBE,OAAS,EAAGqD,YAAU,KAAKC,cAAY,SAASxB,KAAK,YAAnH,SAZQ,IAATmB,EAEQ,cAAgBA,EAEpB,SAkDH,OACA,UACA,QACA,QACA,SACA,OACA,SACA,UACA,YACA,QAEJM,SAAS,EACT9C,cAAc,EACd+C,YAAY,K,iECjFTC,MAvCf,WACE,MAAwBpE,oBAAS,GAAjC,mBAAOD,EAAP,KAAasE,EAAb,KACMC,EAAcC,EACjBC,KAAK,SAAAC,GAAG,MAAK,CAACjB,EAAG,IAAIkB,KAAKD,EAAIhF,MAAOgE,EAAEgB,EAAIE,4BAC3CC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAErB,EAAIsB,EAAEtB,MCzBZ,YAA4D,IAAxCuB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAEzD,EAAwBlF,mBAAS+E,EAAUI,WAA3C,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAAkCrF,oBAAS,GAA3C,mBAAOsF,EAAP,KAAkBC,EAAlB,KAGAnF,qBAAU,WACN,IAAIoF,EAYJ,OATIF,IAEAE,EAAWC,aAAY,WAEnBJ,GAAQ,SAAAD,GAAI,OAAIA,EAAOH,OACxB,IAAOC,IAIP,kBAAMQ,cAAcF,MAC5B,CAACF,IAEJ,IAYMvF,EAAO,WAAOwF,GAAa,IAG3BI,EAAO,kBAAMJ,GAAa,IAGhCnF,qBAAU,WAEFgF,GAAQJ,EAAQG,WAAWQ,MAChC,CAACP,EAAMJ,EAAQG,YAIH,IAAIT,KAAKU,GDvBZQ,CAAS,CACrBb,UAAW,IAAIL,KAAKJ,EAAY,GAAGd,GACnCwB,QAAS,IAAIN,KAAKJ,EAAYA,EAAYjE,OAAS,GAAGmD,GACtDyB,KAAM,KACNC,UAAW,MAGbW,QAAQC,IAAIC,GACZ,IAAMC,EAAa,CACjB/E,GAAI,4BACJC,MAAO,qBACPpB,KAAMwE,EAAYE,KAAI,SAAAC,GAAG,kCAAUA,GAAV,IAAejB,EAAGhE,EAAgCiF,EAAIjB,SAGjF,OACE,eAACyC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,MAAM,SAA3D,UACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,SAAW,wDACX,cAACL,EAAA,EAAD,CAAMK,MAAI,EAACJ,WAAS,EAACK,GAAI,GAAIC,UAAU,mBAAmBC,UAAU,MAApE,SACE,cAACR,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACE,cAAC1G,EAAD,CAAWC,KAAM,CAACkG,GAAajG,KAAMA,QAMzC,cAACkG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACE,cAACG,EAAA,EAAD,CAAYxF,MAAM,UAAUyF,aAAW,iBAAiBC,UAAU,OAAOC,QAAS,kBAAMxC,GAAStE,IAAjG,SACIA,EAAoD,cAAC,IAAD,CAAU+G,SAAS,UAAhE,cAAC,IAAD,CAAuBA,SAAS,kBE3CpCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4916071.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/boroughs.8f7dc80b.geojson\";","export function convertDateToYearMonthDayString(date)\r\n{\r\n    return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n}","// install (please make sure versions match peerDependencies)\r\n// yarn add @nivo/core @nivo/line\r\nimport { Line, ResponsiveLine } from '@nivo/line'\r\nimport React, { useEffect, useState, useRef } from \"react\"\r\nimport { convertDateToYearMonthDayString } from \"../../utils/dateUtils\"\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nexport default function CovidLine ({ data /* see data tab */, play }){ \r\n    const [points, setPoints] = useState(data[0].data.slice(0,1))\r\n\r\n    useEffect(() => {\r\n        if(play)\r\n        {\r\n            if (points.length === data[0].data.length ) return\r\n    \r\n            setTimeout(() => {\r\n                setPoints(p => {\r\n                    if (p.length === data[0].data.length) return p\r\n                    const next = data[0].data[p.length]\r\n    \r\n                    return [\r\n                        ...p,\r\n                        next,\r\n                    ]\r\n                })\r\n            }, 200)\r\n        }\r\n    }, [points, setPoints, play])\r\n\r\n    const newData = [data[0],\r\n    {\r\n        id: \"Covid Cases 7 Day Average Historical\",\r\n        color: \"hsl(19, 70%, 50%)\",\r\n        data: points\r\n    }]\r\n\r\n    const commonProperties = {\r\n        width: 800,\r\n        height: 400,\r\n        margin: { top: 20, right: 20, bottom: 60, left: 60 },\r\n        data : newData,\r\n        animate: true,\r\n        enableSlices: 'x',\r\n    }\r\n\r\n    const CustomSymbol = ({ size, color, borderWidth, borderColor }) => (\r\n        <g>\r\n            <circle fill=\"#fff\" r={size / 8} strokeWidth={borderWidth} stroke={borderColor} />\r\n            <circle\r\n                r={size / 5}\r\n                strokeWidth={borderWidth}\r\n                stroke={borderColor}\r\n                fill={color}\r\n                fillOpacity={0.35}\r\n            />\r\n        </g>\r\n    )\r\n    const CurrentDateLayer = ({ series, xScale, yScale, innerHeight }) => {\r\n        const getCurrentDateOfTimeLapse = (series) => {\r\n            const timelapseSeries = series[1].data;\r\n            if(timelapseSeries)\r\n            {\r\n                const currentRow = timelapseSeries[timelapseSeries.length - 1];\r\n                if (currentRow && currentRow.data && currentRow.data.x)\r\n                {\r\n                    return [convertDateToYearMonthDayString(currentRow.data.x), currentRow.data.y];\r\n                }\r\n            }\r\n            return ['',''];\r\n        }\r\n        const [currentDate, cases ]= getCurrentDateOfTimeLapse(series)\r\n        const getAvgCasesString = () =>\r\n        {\r\n            if(cases != '')\r\n            {\r\n                return \"7-Day Avg: \" + cases;\r\n            }\r\n            return '';\r\n        }\r\n        return (\r\n            <svg version=\"1.1\"\r\n                baseProfile=\"full\"\r\n                width={commonProperties.width} height={commonProperties.height}\r\n                xmlns=\"http://www.w3.org/2000/svg\">\r\n                <text x={commonProperties.width / 2 - 50} y={commonProperties.height / 2 - 50} font-size=\"50\" text-anchor=\"middle\" fill=\"lightgray\">{currentDate}</text>\r\n                <text x={commonProperties.width / 2 - 50} y={commonProperties.height / 2} font-size=\"50\" text-anchor=\"middle\" fill=\"lightgray\">{getAvgCasesString()}</text>\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ResponsiveLine\r\n            {...commonProperties}\r\n            xScale={{\r\n                type: 'time',\r\n                format: '%Y-%m-%d',\r\n                precision: 'day',\r\n            }}\r\n            xFormat=\"time:%Y-%m-%d\"\r\n            yScale={{\r\n                type: 'linear',\r\n                stacked: false,\r\n            }}\r\n            axisLeft={{\r\n                legend: '7-Day Average',\r\n                legendOffset: -50,\r\n                legendPosition: 'middle'\r\n            }}\r\n            axisBottom={{\r\n                format: '%b %d',\r\n                tickValues: 'every 1 month',\r\n                legend: 'Date',\r\n                legendOffset: 36,\r\n                legendPosition: 'middle'\r\n            }}\r\n            enablePoints={false}\r\n            curve='cardinal'\r\n            enablePointLabel={true}\r\n            pointSymbol={CustomSymbol}\r\n            pointSize={5}\r\n            pointBorderWidth={1}\r\n            pointBorderColor={{\r\n                from: 'color',\r\n                modifiers: [['darker', 0.3]],\r\n            }}\r\n            layers={[\r\n                CurrentDateLayer,\r\n                'grid',\r\n                'markers',\r\n                'areas',\r\n                'lines',\r\n                'slices',\r\n                'axes',\r\n                'points',\r\n                'legends',\r\n                'crosshair',\r\n                'mesh'\r\n            ]}\r\n            useMesh={true}\r\n            enableSlices={false}\r\n            enableArea={true}\r\n        />\r\n)}","import React, {useState} from \"react\";\n\nimport { covid_cases_7day_avg } from \"./data/covid\";\nimport { nyc_borough_geo } from \"./data/nycGeo\";\n\nimport CovidLine from \"./components/line/covidLine\";\n\nimport useTimer from \"./hooks/useTimer/useTimer\";\nimport {convertDateToYearMonthDayString} from \"./utils/dateUtils\";\n\nimport \"./App.css\";\nimport {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n  IconButton,\n} from \"@material-ui/core\";\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport StopIcon from '@material-ui/icons/Stop';\n\n\nfunction App() {\n  const [play, setPlay] = useState(false);\n  const covid_cases = covid_cases_7day_avg\n    .map( row => ({x: new Date(row.date), y:row.ALL_CASE_COUNT_7DAY_AVG}))\n    .sort((a,b) => a.x < b.x)\n  const timer = useTimer({\n    startTime: new Date(covid_cases[0].x),\n    endTime: new Date(covid_cases[covid_cases.length - 1].x),\n    step: 1000 * 60 * 60,\n    frequency: 24 * 7,\n  })\n\n  console.log(nyc_borough_geo)\n  const covid_data = {\n    id: \"Covid Cases 7 Day Average\",\n    color: \"hsl(315, 70%, 50%)\",\n    data: covid_cases.map(row => ({ ...row, x: convertDateToYearMonthDayString(row.x)}))\n  }\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" align=\"center\" >\n      <Grid item><h1>NYC Crimes and Covid</h1></Grid>\n      <Grid item container xs={12} className=\"covid_line_chart\" direction=\"row\">\n        <Grid item xs={12}>\n          <CovidLine data={[covid_data]} play={play}></CovidLine>\n        </Grid>\n        {/* <Grid item xs={6}>\n          <CovidLine data={[covid_data]} play={play}></CovidLine>\n        </Grid> */}\n      </Grid>\n      <Grid item xs={12}>\n        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={() => setPlay(!play)}>\n          {!play ? <PlayCircleOutlineIcon fontSize=\"large\" /> : <StopIcon fontSize=\"large\" />}\n        </IconButton>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App","import { useEffect, useState } from \"react\"\r\n\r\nexport default function useTimer({ startTime, endTime, step, frequency }) {\r\n    /** State hook of current time as a value in milliseconds */\r\n    const [time, setTime] = useState(startTime.valueOf())\r\n\r\n    /** State hook representing whether timer is playing or not */\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n\r\n    /** Effect hook that runs when state of isPlaying changes */\r\n    useEffect(() => {\r\n        let interval\r\n\r\n        /** if the current state is playing.. */\r\n        if (isPlaying) {\r\n            /** set interval to run frequncy times every second */\r\n            interval = setInterval(() => {\r\n                /** increment the time by the step value */\r\n                setTime(time => time + step)\r\n            }, 1000 / frequency)\r\n        }\r\n\r\n        /** Cleanup effect by clearing interval */\r\n        return () => clearInterval(interval)\r\n    }, [isPlaying])\r\n\r\n    const playOrStop = () => {\r\n        if(!isPlaying)\r\n        {\r\n            play();\r\n        }\r\n        else\r\n        {\r\n            stop();\r\n        }\r\n    }\r\n\r\n    /** Play function */\r\n    const play = () => {setIsPlaying(true)}\r\n\r\n    /** Stop function */\r\n    const stop = () => setIsPlaying(false)\r\n\r\n    /** Effect hook runs when time changes */\r\n    useEffect(() => {\r\n        /** if time is greater or equal to endTime, stop the timer from running */\r\n        if (time >= endTime.valueOf()) stop()\r\n    }, [time, endTime.valueOf()])\r\n\r\n    const updateTime = time => setTime(time.valueOf())\r\n\r\n    return { time: new Date(time), play, stop, playOrStop, updateTime, isPlaying, startTime, endTime }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}