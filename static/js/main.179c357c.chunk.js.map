{"version":3,"sources":["hooks/useWindowDimensions/useWindowDimensions.js","components/trend/Trend.js","App.js","hooks/useTimer/useTimer.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","Trend","data","time","startTime","endTime","updateTime","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","width","height","plotWidth","plotHeight","createNewXScale","scaleTime","domain","range","createNewYScale","scaleLinear","extent","map","d","y","xScale","setXScale","yScale","setYScale","generateNewArea","generateNewLine","createXAxis","createYAxis","areaPath","setAreaPath","linePath","setLinePath","areaPathGenerator","area","x","y0","y1","curve","curveBasis","linePathGenerator","line","selectedWidth","setSelectedWidth","valueOf","xAxisRef","useRef","xAxisGroup","select","current","xAxis","axisBottom","scale","tickSize","call","yAxisRef","yAxisGroup","yAxis","axisLeft","ticks","svgRef","ref","onClick","evt","left","getBoundingClientRect","clickX","clientX","invert","id","className","transform","clipPath","App","covid_data","covid_cases_7day_avg","row","Date","date","ALL_CASE_COUNT_7DAY_AVG","timer","step","frequency","setTime","isPlaying","setIsPlaying","interval","setInterval","clearInterval","play","stop","playOrStop","useTimer","length","Grid","container","justify","alignItems","align","item","xs","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAEA,SAASA,IACL,MAAmDC,OACnD,MAAO,CAAEC,YADT,EAAQC,WACqBC,aAD7B,EAA2BC,a,WCEhB,SAASC,EAAT,GAAiE,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAC7D,EDCW,WACX,MAAgDC,mBAASZ,KAAzD,mBAAOa,EAAP,KAAyBC,EAAzB,KAWA,OATAC,qBAAU,WACN,SAASC,IACLF,EAAoBd,KAIxB,OADAC,OAAOgB,iBAAiB,SAAUD,GAC3B,kBAAMf,OAAOiB,oBAAoB,SAAUF,MACnD,IAEIH,ECb+BM,GAA9Bf,EAAR,EAAQA,aAAcF,EAAtB,EAAsBA,YAGhBkB,EAAsB,GAAdlB,EACRmB,EAAwB,GAAfjB,EAKTkB,EAAYF,EAFC,GAGbG,EAAaF,EAFC,GAIdG,EAAkB,WAIpB,OAHeC,cACVC,OAAO,CAACjB,EAAWC,IACnBiB,MAAM,CAAC,EAAGL,KAIbM,EAAkB,WAIpB,OAHeC,cACVH,OAAOI,YAAOvB,EAAKwB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAC9BN,MAAM,CAACJ,EAAY,KAI5B,EAA4BX,mBAASY,GAArC,mBAAOU,EAAP,KAAeC,EAAf,KAEA,EAA4BvB,mBAASgB,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KAEAtB,qBAAU,WACNoB,EAAUX,GACVa,EAAUT,GACVU,IACAC,IACAC,IACAC,MACD,CAACrC,EAAcF,IAGlB,MAAgCU,mBAAS,MAAzC,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAAgC/B,mBAAS,MAAzC,mBAAOgC,EAAP,KAAiBC,EAAjB,KAEMP,EAAkB,WAEpB,IAAMQ,EAAoBC,cACrBC,GAAE,SAAAhB,GAAC,OAAIE,EAAOF,EAAEgB,MAChBC,GAAGb,EAAOT,QAAQ,IAClBuB,IAAG,SAAAlB,GAAC,OAAII,EAAOJ,EAAEC,MACjBkB,MAAMC,KAEXT,EAAYG,EAAkBvC,KAG5BgC,EAAkB,WAEpB,IAAMc,EAAoBC,cACrBN,GAAE,SAAAhB,GAAC,OAAIE,EAAOF,EAAEgB,MAChBf,GAAE,SAAAD,GAAC,OAAII,EAAOJ,EAAEC,MAChBkB,MAAMC,KAEXP,EAAYQ,EAAkB9C,KAIlCQ,qBAAU,WACNuB,IACAC,MACD,CAAChC,IAGJ,MAA0CK,mBAAS,GAAnD,mBAAO2C,EAAP,KAAsBC,EAAtB,KACAzC,qBAAU,WACNyC,EAAiBtB,EAAO1B,MACzB,CAACA,EAAKiD,YAGT,IAAMC,EAAWC,mBACXnB,EAAc,WAChB,GAAIkB,EAAU,CAEV,IAAME,EAAaC,YAAOH,EAASI,SAG7BC,EAAQC,cACTC,MAAM/B,GACNgC,SAAS,GAGdN,EAAWO,KAAKJ,KAGxBhD,qBAAU,WACNyB,MACD,CAACkB,IAGJ,IAAMU,EAAWT,mBACXlB,EAAc,WAChB,GAAG2B,EACH,CAEI,IAAMC,EAAaR,YAAOO,EAASN,SAG7BQ,EAAQC,cACTN,MAAM7B,GACN8B,UAAU5C,GACVkD,MAAM,GAGXH,EAAWF,KAAKG,KAIxBvD,qBAAU,WACN0B,MACD,CAAC2B,IAGJ,IAAMK,EAASd,mBAWf,OACI,sBAAKe,IAAKD,EAAQrD,MAAOA,EAAOC,OAAQA,EAAQsD,QAX5B,SAAAC,GAEpB,IAAQC,EAASJ,EAAOX,QAAQgB,wBAAxBD,KAGFE,EAASH,EAAII,QAAUH,EAvHd,GAyHflE,EAAWuB,EAAO+C,OAAOF,GAAU,EAAIA,EAAS,KAIhD,UACI,+BACI,0BAAUG,GAAG,kBAAb,SACI,sBAAMlC,EAAG,EAAGf,EAAG,EAAGb,MAAOmC,EAAelC,OAAQA,QAGxD,mBAAGqD,IAAKN,EAAUe,UAAU,4BAA4BC,UAAS,oBAnItD,GAmIsD,UACjE,oBAAGD,UAAU,cAAcC,UAAS,oBApIzB,GAoIyB,QAApC,UACI,8BACkB,OAAb1C,EAAoB,sBAAMV,EAAGU,EAAUyC,UAAU,qBAAwB,KAC5D,OAAbvC,EAAoB,sBAAMZ,EAAGY,EAAUuC,UAAU,qBAAwB,QAE9E,oBAAGE,SAAU,wBAAb,UACkB,OAAb3C,EAAoB,sBAAMV,EAAGU,EAAUyC,UAAU,gBAAmB,KACvD,OAAbvC,EAAoB,sBAAMZ,EAAGY,EAAUuC,UAAU,gBAAmB,WAG7E,mBAAGT,IAAKhB,EAAUyB,UAAU,4BAA4BC,UAAS,oBA9ItD,GA8IsD,aAA8B7D,EAA9B,U,uCCrH9D+D,MAtBf,WACE,IAAMC,EAAaC,EAAqBzD,KAAK,SAAA0D,GAAG,MAAK,CAACzC,EAAG,IAAI0C,KAAKD,EAAIE,MAAO1D,EAAEwD,EAAIG,4BAC7EC,EChBO,YAA4D,IAAxCpF,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,QAASoF,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAEzD,EAAwBnF,mBAASH,EAAUgD,WAA3C,mBAAOjD,EAAP,KAAawF,EAAb,KAGA,EAAkCpF,oBAAS,GAA3C,mBAAOqF,EAAP,KAAkBC,EAAlB,KAGAnF,qBAAU,WACN,IAAIoF,EAYJ,OATIF,IAEAE,EAAWC,aAAY,WAEnBJ,GAAQ,SAAAxF,GAAI,OAAIA,EAAOsF,OACxB,IAAOC,IAIP,kBAAMM,cAAcF,MAC5B,CAACF,IAEJ,IAYMK,EAAO,WAAOJ,GAAa,IAG3BK,EAAO,kBAAML,GAAa,IAUhC,OAPAnF,qBAAU,WAEFP,GAAQE,EAAQ+C,WAAW8C,MAChC,CAAC/F,EAAME,EAAQ+C,YAIX,CAAEjD,KAAM,IAAIkF,KAAKlF,GAAO8F,OAAMC,OAAMC,WAzBxB,WACXP,EAMAM,IAJAD,KAsB+C3F,WAFpC,SAAAH,GAAI,OAAIwF,EAAQxF,EAAKiD,YAE2BwC,YAAWxF,YAAWC,WDjC7E+F,CAAS,CACrBhG,UAAW,IAAIiF,KAAKH,EAAW,GAAGvC,GAClCtC,QAAS,IAAIgF,KAAKH,EAAWA,EAAWmB,OAAS,GAAG1D,GACpD8C,KAAM,KACNC,UAAW,MAGb,OACE,eAACY,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,MAAM,SAA3D,UACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,SAAW,wDACX,cAACL,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACE,cAAC3G,EAAD,aAAOC,KAAMgF,GAAgBM,MAE/B,cAACc,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACE,eAACC,EAAA,EAAD,CAAQvC,QAASkB,EAAMW,WAAvB,cAAsCX,EAAMI,UAAqB,OAAT,gBEpBjDkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.179c357c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return { windowWidth: width, windowHeight: height };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState, useRef } from \"react\"\r\nimport { scaleTime, scaleLinear, extent, line, area, curveBasis, axisBottom, axisLeft, select } from \"d3\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions/useWindowDimensions\"\r\n\r\nexport default function Trend ({ data, time, startTime, endTime, updateTime }) {\r\n    const { windowHeight, windowWidth } = useWindowDimensions();\r\n\r\n    /** Trend dimensions */\r\n    const width = windowWidth * 0.9\r\n    const height = windowHeight * 0.5\r\n\r\n    /** Axes and plot dimensions */\r\n    const yAxisWidth = 40\r\n    const xAxisHeight = 15\r\n    const plotWidth = width - yAxisWidth\r\n    const plotHeight = height - xAxisHeight\r\n\r\n    const createNewXScale = () => {\r\n        const xScale = scaleTime()\r\n            .domain([startTime, endTime])\r\n            .range([0, plotWidth]);\r\n        return xScale \r\n    }\r\n\r\n    const createNewYScale = () => {\r\n        const yScale = scaleLinear()\r\n            .domain(extent(data.map(d => d.y)))\r\n            .range([plotHeight, 0]);\r\n        return  yScale;\r\n    }\r\n    /** area and line paths define the paths data */\r\n    const [xScale, setXScale] = useState(createNewXScale);\r\n\r\n    const [yScale, setYScale] = useState(createNewYScale);\r\n\r\n    useEffect(() => {\r\n        setXScale(createNewXScale);\r\n        setYScale(createNewYScale);\r\n        generateNewArea();\r\n        generateNewLine();\r\n        createXAxis();\r\n        createYAxis();\r\n    }, [windowHeight, windowWidth])\r\n\r\n    /** area and line paths define the paths data */\r\n    const [areaPath, setAreaPath] = useState(null)\r\n    const [linePath, setLinePath] = useState(null)\r\n\r\n    const generateNewArea = () => {\r\n        /** generate a new area */\r\n        const areaPathGenerator = area()\r\n            .x(d => xScale(d.x))\r\n            .y0(yScale.range()[0])\r\n            .y1(d => yScale(d.y))\r\n            .curve(curveBasis)\r\n\r\n        setAreaPath(areaPathGenerator(data))\r\n    }\r\n\r\n    const generateNewLine = () => {\r\n        /** generate a new line */\r\n        const linePathGenerator = line()\r\n            .x(d => xScale(d.x))\r\n            .y(d => yScale(d.y))\r\n            .curve(curveBasis)\r\n\r\n        setLinePath(linePathGenerator(data))\r\n    }\r\n\r\n    /** When data changes.. */\r\n    useEffect(() => {\r\n        generateNewArea();\r\n        generateNewLine();\r\n    }, [data])\r\n\r\n    /** This is the time span of the current time based on the timer */\r\n    const [selectedWidth, setSelectedWidth] = useState(0)\r\n    useEffect(() => {\r\n        setSelectedWidth(xScale(time))\r\n    }, [time.valueOf()])\r\n\r\n    /** Ref to xAxis */\r\n    const xAxisRef = useRef()\r\n    const createXAxis = () => {\r\n        if (xAxisRef) {\r\n            /** Get xAxis */\r\n            const xAxisGroup = select(xAxisRef.current)\r\n\r\n            /** Create axis */\r\n            const xAxis = axisBottom()\r\n                .scale(xScale)\r\n                .tickSize(0)\r\n\r\n            /** Attach axis to group */\r\n            xAxisGroup.call(xAxis)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        createXAxis();\r\n    }, [xAxisRef])\r\n\r\n    /** Ref to yAxis */\r\n    const yAxisRef = useRef()\r\n    const createYAxis = () => {\r\n        if(yAxisRef)\r\n        {\r\n            /** Get yAxis */\r\n            const yAxisGroup = select(yAxisRef.current)\r\n    \r\n            /** Create axis */\r\n            const yAxis = axisLeft()\r\n                .scale(yScale)\r\n                .tickSize(-plotWidth)\r\n                .ticks(6)\r\n    \r\n            /** Attach axis to group */\r\n            yAxisGroup.call(yAxis)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        createYAxis();\r\n    }, [yAxisRef])\r\n\r\n    /** Update time when click on svg */\r\n    const svgRef = useRef()\r\n    const handlePlotClick = evt => {\r\n        /** Get the svg's left position on the page */\r\n        const { left } = svgRef.current.getBoundingClientRect()\r\n        /** Get the relative click position by subtracting the svg's left position and yAxisWidth from the click\r\n         * position */\r\n        const clickX = evt.clientX - left - yAxisWidth\r\n        /** Pass the relative click position through the xScale invert function to get the appropriate date */\r\n        updateTime(xScale.invert(clickX >= 0 ? clickX : 0))\r\n    }\r\n\r\n    return (\r\n        <svg ref={svgRef} width={width} height={height} onClick={handlePlotClick}>\r\n            <defs>\r\n                <clipPath id=\"selected-region\">\r\n                    <rect x={0} y={0} width={selectedWidth} height={height} />\r\n                </clipPath>\r\n            </defs>\r\n            <g ref={yAxisRef} className=\"trend__y-axis trend__axis\" transform={`translate(${yAxisWidth}, 0)`} />\r\n            <g className=\"trend__plot\" transform={`translate(${yAxisWidth}, 0)`}>\r\n                <g>\r\n                    {areaPath !== null ? <path d={areaPath} className=\"trend__base-area\" /> : null}\r\n                    {linePath !== null ? <path d={linePath} className=\"trend__base-line\" /> : null}\r\n                </g>\r\n                <g clipPath={\"url(#selected-region)\"}>\r\n                    {areaPath !== null ? <path d={areaPath} className=\"trend__area\" /> : null}\r\n                    {linePath !== null ? <path d={linePath} className=\"trend__line\" /> : null}\r\n                </g>\r\n            </g>\r\n            <g ref={xAxisRef} className=\"trend__x-axis trend__axis\" transform={`translate(${yAxisWidth}, ${plotHeight})`} />\r\n        </svg>\r\n    )\r\n}","import React from \"react\"\nimport Trend from \"./components/trend/Trend\"\nimport useTimer from \"./hooks/useTimer/useTimer\"\nimport { covid_cases_7day_avg } from \"./data\"\nimport \"./App.css\"\n\nimport {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n  IconButton,\n} from \"@material-ui/core\";\n\n\nfunction App() {\n  const covid_data = covid_cases_7day_avg.map( row => ({x: new Date(row.date), y:row.ALL_CASE_COUNT_7DAY_AVG}))\n  const timer = useTimer({\n    startTime: new Date(covid_data[0].x),\n    endTime: new Date(covid_data[covid_data.length - 1].x),\n    step: 1000 * 60 * 60,\n    frequency: 24 * 7,\n  })\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" align=\"center\" >\n      <Grid item><h1>NYC Crimes and Covid</h1></Grid>\n      <Grid item xs={12}>\n        <Trend data={covid_data} {...timer} />\n      </Grid>\n      <Grid item xs={12}>\n        <Button onClick={timer.playOrStop}> {!timer.isPlaying ? \"Play\" : \"Stop\"}</Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App","import { useEffect, useState } from \"react\"\r\n\r\nexport default function useTimer({ startTime, endTime, step, frequency }) {\r\n    /** State hook of current time as a value in milliseconds */\r\n    const [time, setTime] = useState(startTime.valueOf())\r\n\r\n    /** State hook representing whether timer is playing or not */\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n\r\n    /** Effect hook that runs when state of isPlaying changes */\r\n    useEffect(() => {\r\n        let interval\r\n\r\n        /** if the current state is playing.. */\r\n        if (isPlaying) {\r\n            /** set interval to run frequncy times every second */\r\n            interval = setInterval(() => {\r\n                /** increment the time by the step value */\r\n                setTime(time => time + step)\r\n            }, 1000 / frequency)\r\n        }\r\n\r\n        /** Cleanup effect by clearing interval */\r\n        return () => clearInterval(interval)\r\n    }, [isPlaying])\r\n\r\n    const playOrStop = () => {\r\n        if(!isPlaying)\r\n        {\r\n            play();\r\n        }\r\n        else\r\n        {\r\n            stop();\r\n        }\r\n    }\r\n\r\n    /** Play function */\r\n    const play = () => {setIsPlaying(true)}\r\n\r\n    /** Stop function */\r\n    const stop = () => setIsPlaying(false)\r\n\r\n    /** Effect hook runs when time changes */\r\n    useEffect(() => {\r\n        /** if time is greater or equal to endTime, stop the timer from running */\r\n        if (time >= endTime.valueOf()) stop()\r\n    }, [time, endTime.valueOf()])\r\n\r\n    const updateTime = time => setTime(time.valueOf())\r\n\r\n    return { time: new Date(time), play, stop, playOrStop, updateTime, isPlaying, startTime, endTime }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}